---
title: "Interest Rates"
format: html
editor: visual
---

# Interest Rates Model

## Setup

### Load packages

```{r}
library(vars)  
library(mFilter)  
library(tseries)  
library(TSstudio)  
library(forecast)
library(tidyverse)
library(here)
library(readxl)
```

### Import data

```{r}
# Import data
newfinal_monthly_all <- read_excel(here("Data", "newfinal_monthly_all.xlsx"), 
    col_types = c("date", "numeric", "numeric", 
        "numeric", "numeric", "numeric"))
```

### Create functions and lists

```{r}
# Create function: create_ts
create_ts <- function(data, column, time_period, frequency = 12) {
  start <- time_period$start
  end <- time_period$end
  ts(data[[column]], start = start, end = end, frequency = frequency)
}
```


```{r}
# Create time period lists
time_period_full <- list(start = c(2013, 4), end = c(2024, 3))
time_period_old <- list(start = c(2013,4), end = c(2023,3))
time_period_actual <- list(start = c(2023, 4), end = c(2024, 3))
```

### Define variables

```{r}
# Define variables
CapRate <- create_ts(newfinal_monthly_all, "cap", time_period_full)
DGS10 <- create_ts(newfinal_monthly_all, "DGS10", time_period_full)
DFF <- create_ts(newfinal_monthly_all, "DFF", time_period_full)
lnDGS10 <- create_ts(newfinal_monthly_all, "lnDGS10", time_period_full)
lnDFF <- create_ts(newfinal_monthly_all, "lnDFF", time_period_full)
```

```{r}
# Create difference variables
DGS10_d2 <- diff(DGS10, differences = 2)
DFF_d2 <- diff(DFF, differences = 2)

# Pad with NA to match original length
DGS10_d2_padded <- c(rep(NA, 2), DGS10_d2)
DFF_d2_padded <- c(rep(NA, 2), DFF_d2)

# Add padded variables to original df
newfinal_monthly_all$DGS10_d2 <- DGS10_d2_padded
newfinal_monthly_all$DFF_d2 <- DFF_d2_padded
```

```{r}
# Define new differenced variables
DGS10_d2 <- create_ts(newfinal_monthly_all, "DGS10_d2", time_period_full)
DFF_d2 <- create_ts(newfinal_monthly_all, "DFF_d2", time_period_full)
```

## Subset data

My first step is *replicating the original forecast*. I need a shortened data set with just that time segment.

### Old data

This is the time segment I used for my original analysis. (4/13-3/23)

```{r}
# Subset dataframe to make one with shortened, original data
olddata <- subset(newfinal_monthly_all, select = c(observation_date, cap, DGS10, DFF, lnDGS10, lnDFF), observation_date < as.Date("2023-04-01"))
colnames(olddata) = c("observation_date", "CapRate", "DGS10", "DFF", "lnDGS10", "lnDFF")
```

```{r}
# Define new matrix variables with old timeframe
oldCapRate <- ts(olddata$CapRate, start = c(2013, 4), end = c(2023, 3), frequency = 12)
oldDGS10 <- ts(olddata$DGS10, start = c(2013, 4), end = c(2023, 3), frequency = 12)
oldDFF <- ts(olddata$DFF, start = c(2013, 4), end = c(2023, 3), frequency = 12)
oldlnDGS10 <- ts(olddata$lnDGS10, start = c(2013, 4), end = c(2023, 3), frequency = 12)
oldlnDFF <- ts(olddata$lnDFF, start = c(2013, 4), end = c(2023, 3), frequency = 12)
# Create difference variables (old)
oldDGS10_d2 <- diff(oldDGS10, differences = 2)
oldDFF_d2 <- diff(oldDFF, differences = 2)
# Define new variables (old)
oldDGS10_d2 <- ts(oldDGS10_d2, start = c(2013, 4), end = c(2023, 3), frequency = 12)
oldDFF_d2 <- ts(oldDFF_d2, start = c(2013, 4), end = c(2023, 3), frequency = 12)
```

### Actual data

This is the time segment between my original analysis and my new data.

```{r}
# Make subset for 'actual' data
actualdata <- subset(newfinal_monthly_all, select = c(observation_date, cap, DGS10, DFF, lnDGS10, lnDFF), observation_date > as.Date("2023-03-01"))
colnames(actualdata) = c("observation_date", "CapRate", "DGS10", "DFF", "lnDGS10", "lnDFF")
```

```{r}
# Define new matrix variables with 'actual' timeframe
actualCapRate <- ts(actualdata$CapRate, start = c(2023, 4), end = c(2024, 3), frequency = 12)
actualDGS10 <- ts(actualdata$DGS10, start = c(2023, 4), end = c(2024, 3), frequency = 12)
actualDFF <- ts(actualdata$DFF, start = c(2023, 4), end = c(2024, 3), frequency = 12)
actuallnDGS10 <- ts(actualdata$lnDGS10, start = c(2023, 4), end = c(2024, 3), frequency = 12)
actuallnDFF <- ts(actualdata$lnDFF, start = c(2023, 4), end = c(2024, 3), frequency = 12)
# Create difference variables (old)
actualDGS10_d2 <- diff(actualDGS10, differences = 2)
actualDFF_d2 <- diff(actualDFF, differences = 2)
# Define new variables (old)
actualDGS10_d2 <- ts(actualDGS10_d2, start = c(2023, 4), end = c(2024, 3), frequency = 12)
actualDFF_d2 <- ts(actualDFF_d2, start = c(2023, 4), end = c(2024, 3), frequency = 12)
```

## Build model (old)

```{r}
# Make new dataframe with only model variables
olddf <- cbind(oldCapRate, oldDGS10_d2, oldDFF_d2)
colnames(olddf) <- cbind("CapRate", "DGS10", "DFF")
# Create model
oldModel <- VAR(olddf, p = 4, type = "const", season = NULL, exog = NULL)
```

```         
replaced "v1" with "olddf"
replaced "Model1" with "oldModel"
```

## Forecast (old)

```{r}
originalforecast <- predict(oldModel, n.ahead = 12, ci = 0.95)
```

### Extract forecast values (old)

```{r}
# Import csv of forecast values
oldforecast <- read_excel("C:/Users/kschmitt1/Knipp Wolf NLG Dropbox/Knipp Group Team Folder/5 - STAFF/3 - STAFF/KSchmitt/Research Reports/Interest Rates (General Report 1)/oldforecast.xlsx")
oldforecast$observation_date <- as.Date(oldforecast$observation_date)
```

### Compare old forecast to new values

#### Line graph

##### Cap rate

```{r}
ggplot() +
geom_line(data = oldforecast, aes(x = observation_date, y = CapRatefcst), color = "blue") +
geom_line(data = actualdata, aes(x = observation_date, y = CapRate), color = "red")
```

##### DGS10

```{r}
ggplot() +
geom_line(data = oldforecast, aes(x = observation_date, y = DGS10fcst), color = "blue") +
geom_line(data = actualdata, aes(x = observation_date, y = DGS10), color = "red")
```

##### DFF

```{r}
ggplot() +
geom_line(data = oldforecast, aes(x = observation_date, y = DFFfcst), color = "blue") +
geom_line(data = actualdata, aes(x = observation_date, y = DFF), color = "red")
```

#### Absolute difference

```{r}
# Create new df for error measurements
error <- data.frame(observation_date=as.Date(oldforecast$observation_date))
## Absolute differences
error$CapRate_absolute_difference=abs(c(oldforecast$CapRatefcst-actualdata$CapRate))
error$DGS10_absolute_difference=abs(c(oldforecast$DGS10fcst-actualdata$DGS10))
error$DFF_absolute_difference=abs(c(oldforecast$DFFfcst-actualdata$DFF))
```

#### Mean Absolute Percentage Error (MAPE)

```{r}
## MAPE
error$CapRatemape=mean(abs((actualdata$CapRate-oldforecast$CapRatefcst)/oldforecast$CapRatefcst))
error$DGS10mape=mean(abs((actualdata$DGS10-oldforecast$DGS10fcst)/oldforecast$DGS10fcst))
error$DFFmape=mean(abs((actualdata$DFF-oldforecast$DFFfcst)/oldforecast$DFFfcst))
```

## Build model (new)

```{r}
# Make new dataframe with only model variables
newdf <- cbind(CapRate, DGS10_d2, DFF_d2)
colnames(newdf) <- cbind("CapRate", "DGS10", "DFF")
# Create model
newModel <- VAR(newdf, p = 4, type = "const", season = NULL, exog = NULL)
```

```         
is p = 4 correct to use here? I need to do my model fitting (and testing) steps for this
```

## Forecast (new)

```{r}
newforecast <- predict(newModel, n.ahead = 12, ci = 0.95)
```

### Extract forecast values (new)

```{r}
# Import csv of forecast values
newforecast <- read_excel("C:/Users/kschmitt1/Knipp Wolf NLG Dropbox/Knipp Group Team Folder/5 - STAFF/3 - STAFF/KSchmitt/Research Reports/Interest Rates (General Report 1)/newforecast.xlsx")
newforecast$observation_date <- as.Date(oldforecast$observation_date)
```

# CURRENT PROBLEMS

-   I need to make sure that the model fitting and testing steps are correct for the new data
-   error on DGS10 and DFF are horrible.
    -   what are the theoretical reasons for this, if any?
        -   my model is really just to predict cap rates, not these variables, but it does kind of do that and the predictions of those impact the cap rate predictions.
    -   did I mess something up?
    -   should I include CI in forecast dfs?
-   I seemed to think before that I couldn't do mape on individual variables, that it was for the whole model, but this was while I was just doing it for CapRate.
